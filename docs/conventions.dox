/*!
@page conventions Conventions

Various conventions that are a must to follow if you contribute to libzbs code.

Naming follows STL
------------------

\note Keep in mind that these rules apply to publically visible things only. If a
function is static it doesn't matter if it's in detail namespace or not. If a
header file is private (doesn't require end-user distribution), it doesn't
matter how it's named.

- Library uses `zbs` namespace and a bunch of nested namespaces.
- Everything uses lower-case letters with underscores.
- Macros use upper-case letters with underscores, `ZBS_` prefix is mandatory.
- Private class members are always prefixed with `_`.
- Private macros are prefixed with `_ZBS_`.
- Private functions use `zbs::detail` namespace without any prefixes.
- Private header files are prefixed with `_`.

Formatting is defined by a couple of simple rules
-------------------------------------------------

- Line starts with a non-space character or one or more tabs.
- Lines ends with an EOL (`\n`) character.
- Everything else is free form, but should be consistent within boundaries
  of a single file.

Pointers vs. references as function parameters
----------------------------------------------

\note Rules apply only to publically visible API.

Use pointers when:
 - The function has a side effect of saving the subject parameter after the
   call ends.
 - The subject parameter is an `OUT` parameter (returns something).

Use references when:
 - The function doesn't save the subject parameter.
 - The function does not modify the subject parameter (use const & in that
   case).

*/
